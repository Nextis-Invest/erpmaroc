#!/usr/bin/env tsx

// Charger les variables d'environnement
import * as dotenv from 'dotenv';
import * as path from 'path';

// Charger le fichier .env.local
dotenv.config({ path: path.join(process.cwd(), '.env.local') });

import { connectToDB } from '../lib/database/connectToDB';
import Employee from '../model/hr/employee';

async function initializeContractHistory() {
  try {
    console.log('üîå Connexion √† la base de donn√©es...');
    await connectToDB();
    console.log('‚úÖ Connect√© √† MongoDB');

    console.log('\nüìã Initialisation de l\'historique des contrats...');

    // R√©cup√©rer tous les employ√©s
    const employees = await Employee.find({});

    console.log(`üìà Nombre d'employ√©s √† traiter: ${employees.length}`);

    let updatedCount = 0;
    let errorsCount = 0;
    const errors: string[] = [];

    for (const employee of employees) {
      try {
        let needsUpdate = false;
        const updates: any = {};

        // Initialiser originalHireDate si pas d√©fini
        if (!employee.originalHireDate) {
          updates.originalHireDate = employee.hireDate;
          needsUpdate = true;
          console.log(`üìÖ Date d'embauche originale ajout√©e pour ${employee.firstName} ${employee.lastName}: ${employee.hireDate.toLocaleDateString('fr-FR')}`);
        }

        // Initialiser l'historique des contrats si vide
        if (!employee.contractHistory || employee.contractHistory.length === 0) {
          updates.contractHistory = [{
            contractType: employee.contractType || 'cdi',
            startDate: employee.hireDate,
            reason: 'Contrat initial',
            changeDate: employee.createdAt || employee.hireDate
          }];
          needsUpdate = true;
          console.log(`üìù Historique de contrat initialis√© pour ${employee.firstName} ${employee.lastName}: ${employee.contractType || 'cdi'}`);
        }

        // Mise √† jour si n√©cessaire
        if (needsUpdate) {
          await Employee.findByIdAndUpdate(employee._id, updates);
          updatedCount++;
          console.log(`‚úÖ Mis √† jour: ${employee.firstName} ${employee.lastName} (${employee.employeeId})`);
        } else {
          console.log(`‚ÑπÔ∏è Aucune mise √† jour n√©cessaire: ${employee.firstName} ${employee.lastName}`);
        }

      } catch (error) {
        const errorMsg = `Erreur lors de la mise √† jour de ${employee.firstName} ${employee.lastName}: ${error}`;
        console.error(`‚ùå ${errorMsg}`);
        errors.push(errorMsg);
        errorsCount++;
      }
    }

    console.log('\nüìä R√âSUM√â DE L\'INITIALISATION:');
    console.log(`‚îî‚îÄ‚îÄ Total employ√©s trait√©s: ${employees.length}`);
    console.log(`‚îî‚îÄ‚îÄ Employ√©s mis √† jour: ${updatedCount}`);
    console.log(`‚îî‚îÄ‚îÄ Erreurs: ${errorsCount}`);

    if (errors.length > 0) {
      console.log('\n‚ùå ERREURS RENCONTR√âES:');
      errors.forEach(error => console.log(`‚îî‚îÄ‚îÄ ${error}`));
    }

    // V√©rification finale
    console.log('\nüîç V√©rification post-initialisation...');
    const employeesWithHistory = await Employee.countDocuments({
      contractHistory: { $exists: true, $ne: [] }
    });
    const employeesWithOriginalDate = await Employee.countDocuments({
      originalHireDate: { $exists: true }
    });

    console.log(`‚îî‚îÄ‚îÄ Employ√©s avec historique de contrat: ${employeesWithHistory}`);
    console.log(`‚îî‚îÄ‚îÄ Employ√©s avec date d'embauche originale: ${employeesWithOriginalDate}`);

    // Export des r√©sultats
    const fs = require('fs');
    const reportPath = path.join(process.cwd(), 'exports', 'contract-history-init-report.json');

    const initReport = {
      initDate: new Date().toISOString(),
      totalEmployees: employees.length,
      updatedEmployees: updatedCount,
      errors: errorsCount,
      errorDetails: errors,
      finalStats: {
        employeesWithHistory: employeesWithHistory,
        employeesWithOriginalDate: employeesWithOriginalDate
      }
    };

    // Cr√©er le dossier exports s'il n'existe pas
    const exportsDir = path.dirname(reportPath);
    if (!fs.existsSync(exportsDir)) {
      fs.mkdirSync(exportsDir, { recursive: true });
    }

    fs.writeFileSync(reportPath, JSON.stringify(initReport, null, 2));
    console.log(`üíæ Rapport d'initialisation export√© vers: ${reportPath}`);

    console.log('\nüéâ Initialisation de l\'historique des contrats termin√©e avec succ√®s!');

    // Afficher exemple d'utilisation de la nouvelle m√©thode
    console.log('\nüìñ EXEMPLE D\'UTILISATION:');
    console.log('// Pour changer le type de contrat en pr√©servant l\'anciennet√©:');
    console.log('const employee = await Employee.findById(employeeId);');
    console.log('employee.changeContractType("freelance", "Passage en freelance", adminId);');
    console.log('await employee.save();');
    console.log('');
    console.log('// L\'anciennet√© sera calcul√©e avec originalHireDate:');
    console.log('const yearsOfService = employee.getYearsOfService(); // Utilise originalHireDate');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  initializeContractHistory()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

export default initializeContractHistory;