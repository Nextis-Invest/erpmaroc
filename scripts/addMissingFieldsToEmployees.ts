#!/usr/bin/env tsx

// Charger les variables d'environnement
import * as dotenv from 'dotenv';
import * as path from 'path';

// Charger le fichier .env.local
dotenv.config({ path: path.join(process.cwd(), '.env.local') });

import { connectToDB } from '../lib/database/connectToDB';
import Employee from '../model/hr/employee';
import Department from '../model/hr/department';
import mongoose from 'mongoose';

async function addMissingFieldsToEmployees() {
  try {
    console.log('üîå Connexion √† la base de donn√©es...');
    await connectToDB();
    console.log('‚úÖ Connect√© √† MongoDB');

    console.log('\nüè¢ Cr√©ation des d√©partements par d√©faut...');

    // R√©cup√©rer la succursale par d√©faut
    const defaultBranch = await mongoose.connection.db.collection('branches').findOne({});
    if (!defaultBranch) {
      throw new Error('Aucune succursale trouv√©e. Ex√©cutez d\'abord createDefaultBranch.ts');
    }

    console.log(`‚úÖ Succursale trouv√©e: ${defaultBranch.companyName} (${defaultBranch._id})`);

    // D√©partements par d√©faut bas√©s sur les fonctions des employ√©s
    const defaultDepartments = [
      {
        name: 'Ressources Humaines',
        code: 'RH',
        description: 'Gestion du personnel et des ressources humaines',
        branch: defaultBranch._id,
        functions: ['HR Manager']
      },
      {
        name: 'D√©veloppement',
        code: 'DEV',
        description: '√âquipe de d√©veloppement logiciel',
        branch: defaultBranch._id,
        functions: ['Frontend Developer', 'Backend Developer', 'IT Director']
      },
      {
        name: 'Ventes et Marketing',
        code: 'SALES',
        description: 'Ventes et marketing',
        branch: defaultBranch._id,
        functions: ['Sales Representative', 'Marketing Specialist']
      },
      {
        name: 'Finance et Comptabilit√©',
        code: 'FIN',
        description: 'Gestion financi√®re et comptabilit√©',
        branch: defaultBranch._id,
        functions: ['Accountant']
      },
      {
        name: 'Op√©rations',
        code: 'OPS',
        description: 'Coordination des op√©rations',
        branch: defaultBranch._id,
        functions: ['Operations Coordinator']
      }
    ];

    // Cr√©er les d√©partements s'ils n'existent pas
    const departmentMapping: Record<string, any> = {};

    for (const deptData of defaultDepartments) {
      let department = await Department.findOne({ code: deptData.code });

      if (!department) {
        department = new Department({
          name: deptData.name,
          code: deptData.code,
          description: deptData.description,
          branch: deptData.branch,
          status: 'active'
        });
        await department.save();
        console.log(`‚úÖ D√©partement cr√©√©: ${deptData.name} (${deptData.code})`);
      } else {
        console.log(`‚ÑπÔ∏è D√©partement existant: ${deptData.name} (${deptData.code})`);
      }

      // Mapper les fonctions aux d√©partements
      for (const func of deptData.functions) {
        departmentMapping[func] = department._id;
      }
    }

    console.log('\nüë• Mise √† jour des employ√©s...');

    // R√©cup√©rer tous les employ√©s
    const employees = await Employee.find({});

    let updatedCount = 0;
    let errorsCount = 0;
    const errors: string[] = [];

    for (const employee of employees) {
      try {
        let needsUpdate = false;
        const updates: any = {};

        // Assigner le d√©partement bas√© sur la fonction
        if (!employee.department && employee.position) {
          const departmentId = departmentMapping[employee.position];
          if (departmentId) {
            updates.department = departmentId;
            needsUpdate = true;
            console.log(`üìÅ Assignation d√©partement pour ${employee.firstName} ${employee.lastName}: ${employee.position} ‚Üí ${Object.keys(departmentMapping).find(k => departmentMapping[k].toString() === departmentId.toString())}`);
          } else {
            console.log(`‚ö†Ô∏è Aucun d√©partement trouv√© pour la fonction: ${employee.position}`);
          }
        }

        // Ajouter d'autres champs manquants si n√©cessaire
        if (!employee.confirmationDate && employee.hireDate) {
          // Date de confirmation par d√©faut : 3 mois apr√®s embauche
          const confirmationDate = new Date(employee.hireDate);
          confirmationDate.setMonth(confirmationDate.getMonth() + 3);
          updates.confirmationDate = confirmationDate;
          needsUpdate = true;
          console.log(`üìÖ Date de confirmation ajout√©e pour ${employee.firstName} ${employee.lastName}`);
        }

        // Mise √† jour si n√©cessaire
        if (needsUpdate) {
          await Employee.findByIdAndUpdate(employee._id, updates);
          updatedCount++;
          console.log(`‚úÖ Mis √† jour: ${employee.firstName} ${employee.lastName} (${employee.employeeId})`);
        } else {
          console.log(`‚ÑπÔ∏è Aucune mise √† jour n√©cessaire: ${employee.firstName} ${employee.lastName}`);
        }

      } catch (error) {
        const errorMsg = `Erreur lors de la mise √† jour de ${employee.firstName} ${employee.lastName}: ${error}`;
        console.error(`‚ùå ${errorMsg}`);
        errors.push(errorMsg);
        errorsCount++;
      }
    }

    console.log('\nüìä R√âSUM√â DES MISES √Ä JOUR:');
    console.log(`‚îî‚îÄ‚îÄ Total employ√©s trait√©s: ${employees.length}`);
    console.log(`‚îî‚îÄ‚îÄ Employ√©s mis √† jour: ${updatedCount}`);
    console.log(`‚îî‚îÄ‚îÄ Erreurs: ${errorsCount}`);

    if (errors.length > 0) {
      console.log('\n‚ùå ERREURS RENCONTR√âES:');
      errors.forEach(error => console.log(`‚îî‚îÄ‚îÄ ${error}`));
    }

    // V√©rification finale
    console.log('\nüîç V√©rification post-mise √† jour...');
    const employeesWithoutDept = await Employee.countDocuments({ department: { $exists: false } });
    const employeesWithDept = await Employee.countDocuments({ department: { $exists: true } });

    console.log(`‚îî‚îÄ‚îÄ Employ√©s avec d√©partement: ${employeesWithDept}`);
    console.log(`‚îî‚îÄ‚îÄ Employ√©s sans d√©partement: ${employeesWithoutDept}`);

    // Export des r√©sultats
    const fs = require('fs');
    const reportPath = path.join(process.cwd(), 'exports', 'missing-fields-update-report.json');

    const updateReport = {
      updateDate: new Date().toISOString(),
      totalEmployees: employees.length,
      updatedEmployees: updatedCount,
      errors: errorsCount,
      errorDetails: errors,
      departmentsCreated: defaultDepartments.length,
      finalStats: {
        employeesWithDepartment: employeesWithDept,
        employeesWithoutDepartment: employeesWithoutDept
      }
    };

    // Cr√©er le dossier exports s'il n'existe pas
    const exportsDir = path.dirname(reportPath);
    if (!fs.existsSync(exportsDir)) {
      fs.mkdirSync(exportsDir, { recursive: true });
    }

    fs.writeFileSync(reportPath, JSON.stringify(updateReport, null, 2));
    console.log(`üíæ Rapport de mise √† jour export√© vers: ${reportPath}`);

    console.log('\nüéâ Ajout des champs manquants termin√© avec succ√®s!');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ajout des champs manquants:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  addMissingFieldsToEmployees()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

export default addMissingFieldsToEmployees;